
/*************************************************
* section list of all apical dendrites           *
*************************************************/

objref all_apicalsA
all_apicalsA = new SectionList()
dendA5_0 all_apicalsA.subtree()

/*************************************************
* section list of all basal dendrites            *
*************************************************/

objref all_basalsA
all_basalsA = new SectionList()
dendA1_0 all_basalsA.subtree()
dendA2_0 all_basalsA.subtree()
dendA3_0 all_basalsA.subtree()
dendA4_0 all_basalsA.subtree()

/*************************************************
* section list of primary apical branch          *
*************************************************/

objref primary_apical_listA
primary_apical_listA = new SectionList()
dendA5_0 primary_apical_listA.append
dendA5_01 primary_apical_listA.append
dendA5_011 primary_apical_listA.append
dendA5_0111 primary_apical_listA.append
dendA5_01111 primary_apical_listA.append
dendA5_011111 primary_apical_listA.append
dendA5_0111111 primary_apical_listA.append
dendA5_01111111 primary_apical_listA.append
dendA5_011111111 primary_apical_listA.append
dendA5_0111111111 primary_apical_listA.append
dendA5_01111111111 primary_apical_listA.append
dendA5_011111111111 primary_apical_listA.append
dendA5_0111111111111 primary_apical_listA.append
dendA5_01111111111111 primary_apical_listA.append
dendA5_011111111111111 primary_apical_listA.append
dendA5_0111111111111111 primary_apical_listA.append
dendA5_01111111111111111 primary_apical_listA.append

forsec primary_apical_listA { ns=int(L/5)
        if (ns==0) {
             ns=1
        }
        if ((ns-int(ns/2))==0) {
             ns=ns+1
        }
        nseg = ns
}


/*************************************************
* initialize basic parameters                    *
*************************************************/

celsius = 35
v_init=-70

global_ra=200.00 	/* internal resistivity in ohm-cm */
Cm=0.75			/* specific membrane capacitance in uF/cm^2 */
Cmy=0.075		/* capacitance in myelin */
Rm=40000		/* specific membrane resistivity in ohm-cm^2 */ 
Rn=50			/* nodal resistivity */
Vleak=-66		/* leak reversal -66 in Cs+*/
Vrest=-70		/* resting potential -60 in control, -66 in Cs+*/

spinelimit=100          /* distance beyond which to modify for spines */
spinefactor=2.0         /* factor by which to change passive properties */

gnabarA=0.036		/* sodium conductance */
nalimitA=275            /* cut-off limit for increase of sodium conductance */
naslopeA=0.0025         /* slope of sodium channel density */

gnodeA=50.0		/* sodium conductance at a node */

gkdrA=0.040             /* delayed rectifier density */
gkapA=0.1               /* proximal A-type potassium starting density */
gkadA=0.1               /* distal A-type potassium  starting density */

dlimitA=300             /* cut-off for increase of A-type density */
dproxA=100              /* distance to switch from proximal to distal type */
dslopeA=0.01            /* slope of A-type density */

isegfactor=100
isegfrac=0.8


/* Make a vector to save AP threshhold */

objref savethA
savethA=new Vector()

savethA.resize(0)
somaA { 
   for (x) {
      savethA.append(0)
   }
}
forsec primary_apical_listA {
           for (x) { 
           savethA.append(0)
           }
}

/*************************************************
* procedure to insert and initialize channels    *
*************************************************/

/* passive properties -- the forall does BOTH neurons */

proc insertpas() {
    print "Inserting passive membrane properties\n"
    forall {insert pas  g_pas=1/(Rm)  Ra=global_ra  e_pas=Vleak 
        insert vmax2 }
}

proc initchannelsA(){

/* keep track of voltage threshhold on primary apical dendrite */

i=0
somaA {
       for (x) { 
           vth_vmax2(x)=savethA.x[i]
           i=i+1
       }
}
forsec primary_apical_listA {
           for (x) { 
             vth_vmax2(x)=savethA.x[i]
             i=i+1
           }
}

/* soma active properties */

somaA { 
    insert nax  gbar_nax=gnabarA  
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA
    insert pas	e_pas=Vleak  g_pas=1/Rm   Ra=global_ra  cm=Cm
}

/* axon hillock active properties */

hillA { 
    insert nax  gbar_nax=gnabarA  
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA
    insert pas	e_pas=Vleak  g_pas=1/Rm   Ra=global_ra   cm=Cm
}

/* initial segment active properties */

isegA { 
    insert nax 
    for (x) { if (x<isegfrac) {
                 gbar_nax(x)=gnabarA
            } else {
                 gbar_nax(x)=isegfactor*gnabarA
            }
    }
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA
    insert pas	e_pas=Vleak  g_pas=1/Rm   Ra=global_ra   cm=Cm
}

/* internodal segments active properties */

for i=0,2 inodeA[i] { 
    insert nax  gbar_nax=gnabarA  
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA*0.2
    insert pas	e_pas=Vleak  g_pas=1/Rm   Ra=global_ra   cm=Cmy
}

/* nodes of Ranvier active properties */

for i=0,1 nodeA[i] { 
    insert nax  gbar_nax=gnodeA  
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA*0.2
    insert pas	e_pas=Vleak  g_pas=1/Rn   Ra=global_ra   cm=Cm
}

/* basal dendrites active properties */

forsec all_basalsA {
    insert nax  gbar_nax=gnabarA  
    insert kdr  gkdrbar_kdr=gkdrA
    insert kap  gkabar_kap=gkapA
    insert pas	e_pas=Vleak  g_pas=1/Rm   Ra=global_ra  cm=Cm
}

/* reset distance */

access somaA
area(0.5)
distance(0,0)

/* procedure to insert channels and set parameters in apical dendrites */

forsec all_apicalsA {

    /* do passive properties; modify for spines if far enough out */    

    insert pas	e_pas=Vleak  Ra=global_ra 
    for (x) { xdist=distance(x)
              if (xdist<=spinelimit) {
                 g_pas(x)=1/Rm
                 cm(x)=Cm
              } else {
                 g_pas(x)=spinefactor/Rm
                 cm(x)=spinefactor*Cm
              }
    }

    /* sodium channels */

    insert nax  
    for (x) { xdist=distance(x)
              if (xdist>nalimitA) {
                    xdist=nalimitA
              }
              if (x!=1) gbar_nax(x)=gnabarA*(1+xdist*naslopeA)
    }

    /* delayed rectifier channels */

    insert kdr  gkdrbar_kdr=gkdrA

    /* A-type potassium channels */

    insert kap
    insert kad
    gkabar_kap=0
    gkabar_kad=0   
    for (x) { xdist=distance(x)
              if (xdist>dlimitA) {
                      xdist=dlimitA
              }
              if (x!=1) {
                gkabar_kap(x)=0
                gkabar_kad(x)=0
                if (xdist>dproxA) {
                   gkabar_kad(x) = gkadA*(1+xdist*dslopeA)
                } else {
                   gkabar_kap(x) = gkapA*(1+xdist*dslopeA)
                }
              }
    }
}

print "Passive properties and channels initialized\n"
print "gnabarA at distall end ", gnabarA*(1+nalimitA*naslopeA)

}






 


